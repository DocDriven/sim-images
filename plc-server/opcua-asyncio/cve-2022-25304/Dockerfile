FROM debian:bookworm-slim AS base

# set environment variables here with 'ENV VAR=value'
# this allows dynamic customization of container behavior

# configure the main environment for build and release here
ARG YOUR_ENV
ENV YOUR_ENV=${YOUR_ENV} \
  PYTHONFAULTHANDLER=1 \
  PYTHONUNBUFFERED=1 \
  PYTHONHASHSEED=random \
  PIP_NO_CACHE_DIR=off \
  PIP_DISABLE_PIP_VERSION_CHECK=on \
  PIP_DEFAULT_TIMEOUT=100 \
  SHELL="/bin/bash" \
  # Poetry's configuration:
  POETRY_NO_INTERACTION=1 \
  POETRY_VIRTUALENVS_CREATE=true \
  POETRY_CACHE_DIR='/opt/cache/pypoetry' \
  POETRY_HOME='/opt/poetry' \
  POETRY_VERSION=1.8.3

# update index and install packages if necessary with
RUN apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y \
    python3.11 \
    python3-venv \
    libssl-dev \
    libsqlite3-dev

FROM base AS builder

COPY /pyproject.toml /poetry.loc[k] .

RUN mkdir /opt/poetry && \ 
    python3 -m venv $POETRY_HOME && \
    $POETRY_HOME/bin/pip install poetry==1.8.3 && \
    $POETRY_HOME/bin/poetry config keyring.enabled false && \
    $POETRY_HOME/bin/poetry self add keyrings.cryptfile@latest && \
    $POETRY_HOME/bin/poetry self add pkginfo==1.10.0 && \
    $POETRY_HOME/bin/poetry --version && \
    $POETRY_HOME/bin/poetry install

FROM base AS runtime

# Mount volume
VOLUME /database

# Copy the needed Python packages
COPY --from=builder /opt /opt

# Copy app files
COPY --chmod=775 /app /app

# Copy the encryption-related files
COPY /pki /pki

# startup is controlled by this script which depends on environment variables
COPY /startup.sh /

# poetry configuration file for package version control
COPY /pyproject.toml /

# will be executed on startup
ENTRYPOINT [ "/usr/bin/env" ]

# arguments passed to entrypoint, ensures that environment variables are set
CMD [ "/bin/sh", "-c", "$POETRY_HOME/bin/poetry run /startup.sh" ]
