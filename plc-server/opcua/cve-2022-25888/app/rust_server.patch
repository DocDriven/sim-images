diff --git a/lib/src/server/subscriptions/mod.rs b/lib/src/server/subscriptions/mod.rs
index 9ff7cc65..017a98f1 100644
--- a/src/server/subscriptions/mod.rs
+++ b/src/server/subscriptions/mod.rs
@@ -26,10 +26,10 @@ pub struct PublishResponseEntry {
 }
 
 /// This converts an OPC UA Duration into a time duration used for testing for interval elapsed
-fn duration_from_ms(d: f64) -> time::Duration {
+fn duration_from_ms(d: f64) -> chrono::Duration {
     // Duration is a floating point number in millis so turn to microseconds for greater accuracy
     // 1 millisecond = 1000 microsecond
-    time::Duration::microseconds((d * 1000f64) as i64)
+    chrono::Duration::microseconds((d * 1000f64) as i64)
 }
 
 pub mod monitored_item;
diff --git a/lib/src/server/subscriptions/subscriptions.rs b/lib/src/server/subscriptions/subscriptions.rs
index 4b2f1998..b717051a 100644
--- a/src/server/subscriptions/subscriptions.rs
+++ b/src/server/subscriptions/subscriptions.rs
@@ -312,7 +312,7 @@ impl Subscriptions {
         self.publish_request_queue.retain(|request| {
             let request_header = &request.request.request_header;
             let request_timestamp: DateTimeUtc = request_header.timestamp.into();
-            let publish_request_timeout = time::Duration::milliseconds(if request_header.timeout_hint > 0 && (request_header.timeout_hint as i64) < publish_request_timeout {
+            let publish_request_timeout = chrono::Duration::milliseconds(if request_header.timeout_hint > 0 && (request_header.timeout_hint as i64) < publish_request_timeout {
                 request_header.timeout_hint as i64
             } else {
                 publish_request_timeout
