FROM rust:slim-bookworm AS builder

# set environment variables here with 'ENV VAR=value'
# this allows dynamic customization of container behavior

RUN apt-get update && apt-get install -y \
    patch \
    libssl-dev \
    libsqlite3-dev \
    pkg-config && rm -rf /var/lib/apt/lists/*

# copy the source code
COPY /app /app

# set the working directory inside the builder container
WORKDIR /app

# pre-fetch the dependencies
RUN cargo fetch


RUN find /usr/local/cargo/registry/src -type d -name "opcua-*" -exec sh -c 'patch -d "{}" -p1 < /app/rust_server.patch' \;

RUN cargo build --release

# point cargo to the patched local version
# RUN echo '[patch.crates-io]\nopcua = { path = "/usr/local/src/opcua" }' >> Cargo.toml

# build the server
# RUN cargo build --release

#
#
# # update index and install packages if necessary with
# RUN apt-get update && apt-get install -y \
#      \
#     && rm -rf /var/lib/apt/lists/*
#
#
# RUN apt-get install -y \
#     libsqlite
#
#
#     # curl \
#     # gcc \
#     # libssl-dev \
#     # libsqlite3-dev \
#     # pkg-config
#
#
#
#
#
# FROM base AS runtime
#
# # Mount volume
# VOLUME /database
#
# # Copy app files
# COPY /app /usr/src/app
#
# # Build the app
# RUN cd /usr/src/app; \
#     cargo build --release;
#
# # Copy the encryption-related files
# COPY /pki /pki
#
# # startup is controlled by this script which depends on environment variables
# COPY /startup.sh /
#
# # will be executed on startup
# ENTRYPOINT [ "usr/bin/env" ]
#
# # arguments passed to entrypoint, ensures that environment variables are set
# CMD [ "/bin/sh", "/startup.sh" ]
