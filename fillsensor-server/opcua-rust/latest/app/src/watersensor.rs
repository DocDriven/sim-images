// This file was autogenerated from WS.NodeSet2.xml by tools/schema/gen_nodeset.js
// DO NOT EDIT THIS FILE

#[allow(unused_imports)]
use std::{convert::TryFrom, str::FromStr};

#[allow(unused_imports)]
use crate::{
    opcua::server::address_space::{types::*, EventNotifier},
    opcua::types::{
        service_types::Argument, DataTypeId, ExtensionObject, LocalizedText, NodeId,
        ReferenceTypeId, UAString, Variant, VariantTypeId,
    },
};

#[allow(unused_variables)]
pub fn populate_address_space(address_space: &mut AddressSpace) {
    add_object_1(address_space);
    add_object_2(address_space);
    add_object_3(address_space);
    add_object_4(address_space);
    add_object_5(address_space);
    add_object_6(address_space);
    add_object_7(address_space);
    add_object_8(address_space);
    add_object_9(address_space);
    add_object_10(address_space);
    add_object_11(address_space);
    add_object_12(address_space);
    add_object_13(address_space);
    add_object_14(address_space);
    add_object_15(address_space);
    add_object_16(address_space);
    add_object_17(address_space);
    add_object_18(address_space);
    add_object_19(address_space);
    add_object_20(address_space);
    add_object_21(address_space);
    add_object_22(address_space);
    add_object_23(address_space);
    add_object_24(address_space);
    add_objecttype_25(address_space);
    add_objecttype_26(address_space);
    add_objecttype_27(address_space);
    add_objecttype_28(address_space);
    add_objecttype_29(address_space);
    add_objecttype_30(address_space);
    add_objecttype_31(address_space);
    add_objecttype_32(address_space);
    add_variable_33(address_space);
    add_variable_34(address_space);
    add_variable_35(address_space);
    add_variable_36(address_space);
    add_variable_37(address_space);
    add_variable_38(address_space);
    add_variable_39(address_space);
    add_variable_40(address_space);
    add_variable_41(address_space);
    add_variable_42(address_space);
    add_variable_43(address_space);
    add_variable_44(address_space);
    add_variable_45(address_space);
    add_variable_46(address_space);
    add_variable_47(address_space);
    add_variable_48(address_space);
    add_variable_49(address_space);
    add_variable_50(address_space);
    add_variable_51(address_space);
    add_variable_52(address_space);
    add_variable_53(address_space);
    add_variable_54(address_space);
    add_variable_55(address_space);
    add_variable_56(address_space);
    add_variable_57(address_space);
    add_variable_58(address_space);
    add_variable_59(address_space);
    add_variable_60(address_space);
    add_variable_61(address_space);
    add_variable_62(address_space);
    add_variable_63(address_space);
    add_variable_64(address_space);
    add_variable_65(address_space);
    add_variable_66(address_space);
    add_variable_67(address_space);
    add_variable_68(address_space);
    add_variable_69(address_space);
    add_variable_70(address_space);
    add_variable_71(address_space);
    add_variable_72(address_space);
    add_variable_73(address_space);
    add_variable_74(address_space);
    add_variable_75(address_space);
    add_variable_76(address_space);
    add_variable_77(address_space);
    add_variable_78(address_space);
    add_variable_79(address_space);
    add_variable_80(address_space);
    add_variable_81(address_space);
    add_variable_82(address_space);
    add_variable_83(address_space);
    add_variable_84(address_space);
    add_variable_85(address_space);
    add_variable_86(address_space);
    add_variable_87(address_space);
    add_variable_88(address_space);
    add_variable_89(address_space);
    add_variable_90(address_space);
    add_variable_91(address_space);
    add_variable_92(address_space);
    add_variable_93(address_space);
    add_variable_94(address_space);
    add_variable_95(address_space);
    add_variable_96(address_space);
    add_variable_97(address_space);
    add_variable_98(address_space);
    add_variable_99(address_space);
    add_variable_100(address_space);
    add_variable_101(address_space);
    add_variable_102(address_space);
    add_variable_103(address_space);
    add_variable_104(address_space);
    add_variable_105(address_space);
    add_variable_106(address_space);
    add_variable_107(address_space);
}

fn add_object_1(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:FillLevel";
    let display_name = "FillLevel";
    let node_id = NodeId::new(2, 64);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 65), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 66), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 63), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_2(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:FillLevel";
    let display_name = "FillLevel";
    let node_id = NodeId::new(2, 71);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 72), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 73), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 70), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_3(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Device";
    let display_name = "Device";
    let node_id = NodeId::new(2, 77);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Generic device information and base parameters"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 78), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 79), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 80), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 81), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 1), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 76), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_4(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:IO";
    let display_name = "IO";
    let node_id = NodeId::new(2, 82);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Group for all IO related functions"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 83), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 15), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 76), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_5(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Measurement";
    let display_name = "Measurement";
    let node_id = NodeId::new(2, 84);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Measurement functions and properties defined by the sensor"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 85), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 88), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 89), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 90), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 76), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_6(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:FillLevel";
    let display_name = "FillLevel";
    let node_id = NodeId::new(2, 85);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 86), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 87), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 84), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_7(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Diagnostics";
    let display_name = "Diagnostics";
    let node_id = NodeId::new(2, 91);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Diagnostic functions and properties defined by the sensor"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 92), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 93), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 12), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 76), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_8(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Alarms";
    let display_name = "Alarms";
    let node_id = NodeId::new(2, 94);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Alarm related configuration and flags"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 95), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 96), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 97), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 98), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 99), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 6), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 76), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_9(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Device";
    let display_name = "Device";
    let node_id = NodeId::new(2, 101);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Generic device information and base parameters"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 102), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 103), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 104), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 105), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 1), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 100), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_10(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Measurement";
    let display_name = "Measurement";
    let node_id = NodeId::new(2, 106);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Measurement functions and properties defined by the sensor"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 107), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 110), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 111), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 70), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 100), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_11(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:FillLevel";
    let display_name = "FillLevel";
    let node_id = NodeId::new(2, 107);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 108), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 109), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 106), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_12(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Diagnostics";
    let display_name = "Diagnostics";
    let node_id = NodeId::new(2, 112);
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Diagnostic functions and properties defined by the sensor"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 113), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 114), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 12), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 100), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_13(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:IndicatorX001";
    let display_name = "IndicatorX001";
    let node_id = NodeId::new(2, "indicator");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("A generic Water Level Sensor for Pentesting"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 85), &ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(2, 76), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_14(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Device";
    let display_name = "Device";
    let node_id = NodeId::new(2, "indicator");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Generic device information and base parameters"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 1), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_15(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:IO";
    let display_name = "IO";
    let node_id = NodeId::new(2, "indicator");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Group for all IO related functions"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 15), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_16(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Measurement";
    let display_name = "Measurement";
    let node_id = NodeId::new(2, "indicator");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Measurement functions and properties defined by the sensor"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_17(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:FillLevel";
    let display_name = "FillLevel";
    let node_id = NodeId::new(2, "indicator");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_18(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Diagnostics";
    let display_name = "Diagnostics";
    let node_id = NodeId::new(2, "indicator");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Diagnostic functions and properties defined by the sensor"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 12), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_19(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Alarms";
    let display_name = "Alarms";
    let node_id = NodeId::new(2, "indicator");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Alarm related configuration and flags"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 6), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_20(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:TankV001";
    let display_name = "TankV001";
    let node_id = NodeId::new(2, "tank");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("A generic Water Tank for Pentesting"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 85), &ReferenceTypeId::Organizes, ReferenceDirection::Inverse),
        (&NodeId::new(2, 100), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
    ]));
}

fn add_object_21(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Device";
    let display_name = "Device";
    let node_id = NodeId::new(2, "tank");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Generic device information and base parameters"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 1), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_22(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Measurement";
    let display_name = "Measurement";
    let node_id = NodeId::new(2, "tank");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Measurement functions and properties defined by the sensor"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 70), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_23(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:FillLevel";
    let display_name = "FillLevel";
    let node_id = NodeId::new(2, "tank");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_object_24(address_space: &mut AddressSpace) {
    // Object
    let browse_name = "1:Diagnostics";
    let display_name = "Diagnostics";
    let node_id = NodeId::new(2, "tank");
    let mut node = Object::new(&node_id, browse_name, display_name, EventNotifier::empty());
    node.set_description(LocalizedText::from("Diagnostic functions and properties defined by the sensor"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 12), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_25(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "1:GenericDeviceType";
    let display_name = "GenericDeviceType";
    let node_id = NodeId::new(2, 1);
    let mut node = ObjectType::new(&node_id, browse_name, display_name, false);
    node.set_description(LocalizedText::from("Base Class for device specific data."));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 2), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 3), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 4), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 5), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_26(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "1:GenericAlarmsType";
    let display_name = "GenericAlarmsType";
    let node_id = NodeId::new(2, 6);
    let mut node = ObjectType::new(&node_id, browse_name, display_name, false);
    node.set_description(LocalizedText::from("Base class for generic alarm properties and variables."));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 7), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 8), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 9), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 10), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 11), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_27(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "1:GenericDiagnosticsType";
    let display_name = "GenericDiagnosticsType";
    let node_id = NodeId::new(2, 12);
    let mut node = ObjectType::new(&node_id, browse_name, display_name, false);
    node.set_description(LocalizedText::from("Base class for publishing diagnostic information."));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 13), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 14), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_28(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "1:GenericIOType";
    let display_name = "GenericIOType";
    let node_id = NodeId::new(2, 15);
    let mut node = ObjectType::new(&node_id, browse_name, display_name, false);
    node.set_description(LocalizedText::from("A generic sensor that read a process value."));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 16), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_29(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "1:WaterSensorMeasurementsType";
    let display_name = "WaterSensorMeasurementsType";
    let node_id = NodeId::new(2, 63);
    let mut node = ObjectType::new(&node_id, browse_name, display_name, false);
    node.set_description(LocalizedText::from("Base class for measurement functions of a water sensor."));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 64), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 67), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 68), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 69), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_30(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "1:WaterTankMeasurementsType";
    let display_name = "WaterTankMeasurementsType";
    let node_id = NodeId::new(2, 70);
    let mut node = ObjectType::new(&node_id, browse_name, display_name, false);
    node.set_description(LocalizedText::from("Base class for measurement functions of a water sensor."));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 71), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 74), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(2, 75), &ReferenceTypeId::HasProperty, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_31(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "1:GenericWaterSensorType";
    let display_name = "GenericWaterSensorType";
    let node_id = NodeId::new(2, 76);
    let mut node = ObjectType::new(&node_id, browse_name, display_name, false);
    node.set_description(LocalizedText::from("A generic water sensor that can be attached to an industrial process"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 77), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 82), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 84), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 91), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 94), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_objecttype_32(address_space: &mut AddressSpace) {
    // ObjectType
    let browse_name = "1:GenericWaterTankType";
    let display_name = "GenericWaterTankType";
    let node_id = NodeId::new(2, 100);
    let mut node = ObjectType::new(&node_id, browse_name, display_name, false);
    node.set_description(LocalizedText::from("A generic water tank"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(2, 101), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 106), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(2, 112), &ReferenceTypeId::HasComponent, ReferenceDirection::Forward),
        (&NodeId::new(0, 58), &ReferenceTypeId::HasSubtype, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_33(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:DeviceID";
    let display_name = "DeviceID";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 2);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("Localized Name of our custom node inside the system"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 1), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_34(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Location";
    let display_name = "Location";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 3);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("World Readable location information"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 1), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_35(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Manufacturer";
    let display_name = "Manufacturer";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 4);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("The device manufacturer"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 1), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_36(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:ModelNumber";
    let display_name = "ModelNumber";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 5);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("A unique Model number that can be referenced for our testing setup"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 1), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_37(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmHighLevel";
    let display_name = "AlarmHighLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 7);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Indicated an active Alarm for ActualLevel greater than AlarmThresholdMax"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 6), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_38(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmLowLevel";
    let display_name = "AlarmLowLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 8);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Indicated an active Alarm for ActualLevel less than AlarmThresholdMax"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 6), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_39(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmThresholdMin";
    let display_name = "AlarmThresholdMin";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 9);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Controls the minimum FillLevel required to trigger a alarm on MinThreshold"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 6), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_40(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmThresholdMax";
    let display_name = "AlarmThresholdMax";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 10);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Controls the maximum Filllevel required to trigger a alarm on MaxThreshold"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 6), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_41(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmsEnabled";
    let display_name = "AlarmsEnabled";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 11);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Controls the enabled Alarm functionality for the device"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 6), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_42(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:StatusOK";
    let display_name = "StatusOK";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 13);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device operates normal, Otherwise false"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 12), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_43(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Fault";
    let display_name = "Fault";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 14);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device is outside of operational range, reading > Maxlevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 12), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_44(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Output";
    let display_name = "Output";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 16);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the Water Level is within operational Range (aka > MinLevel), Otherwise false"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 15), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_45(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Absolute";
    let display_name = "Absolute";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 65);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in the configured unit"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 64), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_46(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Percent";
    let display_name = "Percent";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 66);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 64), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_47(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Unit";
    let display_name = "Unit";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 67);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("defines a world readable string to how we represent the fill level (Percent)"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 63), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_48(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:MinLevel";
    let display_name = "MinLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 68);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the minimum Level the Sensor is configured for"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 63), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_49(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:MaxLevel";
    let display_name = "MaxLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 69);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the Maximum Level the Sensor is configured for"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 63), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_50(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Absolute";
    let display_name = "Absolute";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 72);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in the configured unit"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 71), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_51(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Percent";
    let display_name = "Percent";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 73);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 71), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_52(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Unit";
    let display_name = "Unit";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 74);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("Defines a world readable string to how we represent the fill level (Percent)"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 70), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_53(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Capacity";
    let display_name = "Capacity";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 75);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the minimum Level the water tank is able to hold in units"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 70), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_54(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:DeviceID";
    let display_name = "DeviceID";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 78);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("Localized Name of our custom node inside the system"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 77), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_55(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Location";
    let display_name = "Location";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 79);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("World Readable location information"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 77), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_56(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Manufacturer";
    let display_name = "Manufacturer";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 80);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("The device manufacturer"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 77), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_57(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:ModelNumber";
    let display_name = "ModelNumber";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 81);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("A unique Model number that can be referenced for our testing setup"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 77), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_58(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Output";
    let display_name = "Output";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 83);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the Water Level is within operational Range (aka > MinLevel), Otherwise false"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 82), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_59(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Absolute";
    let display_name = "Absolute";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 86);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in the configured unit"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 85), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_60(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Percent";
    let display_name = "Percent";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 87);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 85), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_61(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Unit";
    let display_name = "Unit";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 88);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("defines a world readable string to how we represent the fill level (Percent)"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 84), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_62(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:MinLevel";
    let display_name = "MinLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 89);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the minimum Level the Sensor is configured for"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 84), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_63(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:MaxLevel";
    let display_name = "MaxLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 90);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the Maximum Level the Sensor is configured for"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 84), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_64(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:StatusOK";
    let display_name = "StatusOK";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 92);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device operates normal, Otherwise false"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 91), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_65(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Fault";
    let display_name = "Fault";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 93);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device is outside of operational range, reading > Maxlevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 91), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_66(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmHighLevel";
    let display_name = "AlarmHighLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 95);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Indicated an active Alarm for ActualLevel greater than AlarmThresholdMax"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 94), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_67(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmLowLevel";
    let display_name = "AlarmLowLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 96);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Indicated an active Alarm for ActualLevel less than AlarmThresholdMax"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 94), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_68(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmThresholdMin";
    let display_name = "AlarmThresholdMin";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 97);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Controls the minimum FillLevel required to trigger a alarm on MinThreshold"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 94), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_69(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmThresholdMax";
    let display_name = "AlarmThresholdMax";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 98);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Controls the maximum Filllevel required to trigger a alarm on MaxThreshold"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 94), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_70(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmsEnabled";
    let display_name = "AlarmsEnabled";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 99);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Controls the enabled Alarm functionality for the device"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 94), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_71(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:DeviceID";
    let display_name = "DeviceID";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 102);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("Localized Name of our custom node inside the system"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 101), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_72(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Location";
    let display_name = "Location";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 103);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("World Readable location information"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 101), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_73(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Manufacturer";
    let display_name = "Manufacturer";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 104);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("The device manufacturer"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 101), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_74(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:ModelNumber";
    let display_name = "ModelNumber";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 105);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("A unique Model number that can be referenced for our testing setup"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 101), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_75(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Absolute";
    let display_name = "Absolute";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 108);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in the configured unit"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 107), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_76(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Percent";
    let display_name = "Percent";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 109);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 107), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_77(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Unit";
    let display_name = "Unit";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 110);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("Defines a world readable string to how we represent the fill level (Percent)"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 106), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_78(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Capacity";
    let display_name = "Capacity";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 111);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the minimum Level the water tank is able to hold in units"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 106), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_79(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:StatusOK";
    let display_name = "StatusOK";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 113);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device operates normal, Otherwise false"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 112), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_80(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Fault";
    let display_name = "Fault";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, 114);
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device is outside of operational range, reading > Maxlevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(0, 78), &ReferenceTypeId::HasModellingRule, ReferenceDirection::Forward),
        (&NodeId::new(2, 112), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_81(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:DeviceID";
    let display_name = "DeviceID";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("Localized Name of our custom node inside the system"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_82(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Location";
    let display_name = "Location";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("World Readable location information"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_83(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Manufacturer";
    let display_name = "Manufacturer";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("The device manufacturer"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_84(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:ModelNumber";
    let display_name = "ModelNumber";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("A unique Model number that can be referenced for our testing setup"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_85(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Output";
    let display_name = "Output";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the Water Level is within operational Range (aka > MinLevel), Otherwise false"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_86(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Absolute";
    let display_name = "Absolute";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in the configured unit"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_87(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Percent";
    let display_name = "Percent";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_88(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Unit";
    let display_name = "Unit";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("defines a world readable string to how we represent the fill level (Percent)"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_89(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:MinLevel";
    let display_name = "MinLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the minimum Level the Sensor is configured for"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_90(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:MaxLevel";
    let display_name = "MaxLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the Maximum Level the Sensor is configured for"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_91(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:StatusOK";
    let display_name = "StatusOK";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device operates normal, Otherwise false"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_92(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Fault";
    let display_name = "Fault";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device is outside of operational range, reading > Maxlevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_93(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmHighLevel";
    let display_name = "AlarmHighLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Indicated an active Alarm for ActualLevel greater than AlarmThresholdMax"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_94(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmLowLevel";
    let display_name = "AlarmLowLevel";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Indicated an active Alarm for ActualLevel less than AlarmThresholdMax"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_95(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmThresholdMin";
    let display_name = "AlarmThresholdMin";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Controls the minimum FillLevel required to trigger a alarm on MinThreshold"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_96(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmThresholdMax";
    let display_name = "AlarmThresholdMax";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Controls the maximum Filllevel required to trigger a alarm on MaxThreshold"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_97(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:AlarmsEnabled";
    let display_name = "AlarmsEnabled";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "indicator");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Controls the enabled Alarm functionality for the device"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "indicator"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_98(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:DeviceID";
    let display_name = "DeviceID";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("Localized Name of our custom node inside the system"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_99(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Location";
    let display_name = "Location";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("World Readable location information"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_100(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Manufacturer";
    let display_name = "Manufacturer";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("The device manufacturer"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_101(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:ModelNumber";
    let display_name = "ModelNumber";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("A unique Model number that can be referenced for our testing setup"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_102(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Absolute";
    let display_name = "Absolute";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in the configured unit"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_103(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Percent";
    let display_name = "Percent";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("FillLevel of the connected Tank in Percent. Returns between 0 and 1 based off configured FillLevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_104(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Unit";
    let display_name = "Unit";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 12), None, None, value);
    node.set_description(LocalizedText::from("Defines a world readable string to how we represent the fill level (Percent)"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_105(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Capacity";
    let display_name = "Capacity";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 11), None, None, value);
    node.set_description(LocalizedText::from("Defines the minimum Level the water tank is able to hold in units"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 68), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasProperty, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_106(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:StatusOK";
    let display_name = "StatusOK";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device operates normal, Otherwise false"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

fn add_variable_107(address_space: &mut AddressSpace) {
    // Variable
    let browse_name = "1:Fault";
    let display_name = "Fault";
    let value = Variant::Empty;
    let node_id = NodeId::new(2, "tank");
    let mut node = Variable::new_data_value(&node_id, browse_name, display_name, NodeId::new(0, 1), None, None, value);
    node.set_description(LocalizedText::from("Returns true if the device is outside of operational range, reading > Maxlevel"));
    let _ = address_space.insert(node, Some(&[
        (&NodeId::new(0, 63), &ReferenceTypeId::HasTypeDefinition, ReferenceDirection::Forward),
        (&NodeId::new(2, "tank"), &ReferenceTypeId::HasComponent, ReferenceDirection::Inverse),
    ]));
}

